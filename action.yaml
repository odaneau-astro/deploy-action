name: "Deploy Apache Airflow DAGs to Astro"
description: "Test your DAGs and deploy your Astro project to a Deployment on Astro, Astronomer's managed Airflow service."
branding:
  icon: "upload-cloud"
  color: "purple"
inputs:
  root-folder:
    required: false
    default: ./
    description: "Path to the Astro project folder that contains the 'dags' folder"
  parse:
    required: false
    default: false
    description: "If true DAGs will be parsed before deploying to Astro."
  pytest:
    required: false
    default: false
    description: "if true custom pytests will be ran before deploying to Astro."
  pytest-file:
    required: false
    default: ""
    description: "Specify custom pytest files to run with the pytest command."
  force:
    required: false
    default: false
    description: "If true your code will be force deployed to Astronomer. Mostly used to skip parse test on image deploys."
  image-name:
    required: false
    default: no-custom-image
    description: "Specify a custom built image to deploy to an Asto Deployment."
  action:
    required: false
    default: deploy
    description: "Specify what action you would like to take. Use this option to create or delete deployment previews. Specify either 'create-deployment-preview', 'delete-deployment-preview' or 'deploy-deployment-preview'. Don't sepcify anything if you are deploying to a regular Deployment."
  deployment-name:
    required: false
    default: false
    description: "The name of the Deployment you want to make preview from or are deploying to."
  deployment-id:
    required: false
    default: false
    description: "The id of the Deployment you to make a preview from or are deploying to."
  workspace:
    required: false
    default: false
    description: "If you are using an organization token you will need to provide a workspace name or id."
  preview-name:
    required: false
    default: false
    description: "Custom preview name. By default this is <branch-name>_<deployment-name>."
  copy-connections:
    required: false
    default: true
    description: "Copy connections from the original Deployment to the new deployment preview."
  copy-airflow-variables:
    required: false
    default: true
    description: "Copy Airflow variables from the original Deployment to the new deployment preview."
  copy-pools:
    required: false
    default: true
    description: "Copy pools from the original Deployment to the new deployment preview."
  checkout:
    required: false
    default: true
    description: "Whether to checkout the repo as the first step. Set this to false if you want to modify repo contents before invoking the action"
outputs:
  preview-id:
    description: "The ID of the created deployment preview. Only works when action=create-deployment-preview"
    value: ${{ steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID }}

runs:
  using: "composite"
  steps:
    - name: checkout repo
      uses: actions/checkout@v3
      if: inputs.checkout == true
      with:
        fetch-depth: 2
        clean: false
    - name: Install Astro
      run: |
        curl -sSL https://install.astronomer.io | sudo bash -s
      shell: bash
    - name: Deployment Preview action
      run: |

        # set action
        ACTION=nothing

        # switch workspace if specified
        if [[ ${{ inputs.workspace }} != false ]]; then
          astro workspace switch ${{ inputs.workspace }}
        fi
        # error if both deployment name and id are used
        if [[ "${{ inputs.deployment-name }}" != false && ${{ inputs.deployment-id }} != false ]]; then
          echo ERROR: cannot specify both a Deployment ID and Name
          exit 1 # terminate and indicate error
        fi
        # figure out deployment id
        if [[ "${{ inputs.deployment-name }}" != false ]]; then
          # get deployment-id
          DEPLOYMENT_ID="$(astro deployment inspect --clean-output -n "${{ inputs.deployment-name }}" --key metadata.deployment_id)"
        fi

        if [[ ${{ inputs.deployment-id }} != false ]]; then
          DEPLOYMENT_ID=${{ inputs.deployment-id }}
        fi
        # create deployment preview if action is create-deployment-preview
        if [[ ${{ inputs.action }} == create-deployment-preview ]]; then



          if [[ "${{ inputs.deployment-name }}" == false && ${{ inputs.deployment-id }} == false ]]; then
            echo ERROR: cannot create a deployment preview without specifying a deployment name or id
            exit 1 # terminate and indicate error
          fi

          if [[ ${{ inputs.preview-name }} != false ]]; then
            BRANCH_DEPLOYMENT_NAME=${{ inputs.preview-name }}

          else 
            # get branch name
            DEPLOYMENT_NAME="$(astro deployment inspect $DEPLOYMENT_ID --clean-output --key configuration.name)"
            if [[ ${GITHUB_HEAD_REF##*/} != "" ]]; then
              BRANCH_DEPLOYMENT_NAME=${GITHUB_HEAD_REF##*/}_$DEPLOYMENT_NAME
            else
              branch_ref="${{ github.ref }}"
              branch_name="${branch_ref##*/}"
              BRANCH_DEPLOYMENT_NAME=${branch_name}_$DEPLOYMENT_NAME
            fi
            BRANCH_DEPLOYMENT_NAME="${BRANCH_DEPLOYMENT_NAME// /_}"
            echo $BRANCH_DEPLOYMENT_NAME
          fi

          # Create template of deployment to be copied with
          astro deployment inspect $DEPLOYMENT_ID --clean-output --template > deployment-preview-template.yaml # automatically creates deployment-preview-template.yaml file

          # Add name to deployment template file
          sed -i "s|  name:.*|  name: ${BRANCH_DEPLOYMENT_NAME}|g"  deployment-preview-template.yaml
          
          # Create new deployment preview based on the deployment template file
          astro deployment create --deployment-file deployment-preview-template.yaml

          # Get final Deployment ID
          echo "FINAL_DEPLOYMENT_ID=$(astro deployment inspect --clean-output -n $BRANCH_DEPLOYMENT_NAME --key metadata.deployment_id)" >> $GITHUB_OUTPUT

          # Get original Deployment ID
          echo "ORIGINAL_DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

          # don't skip deploy
          echo "SKIP_DEPLOY=false" >> $GITHUB_OUTPUT

          # image deploy only
          echo "IMAGE_DEPLOY_ONLY=true" >> $GITHUB_OUTPUT

          # set action
          ACTION=create
        fi

        # delete deployment preview and skip deploy if action is delete-deployment-preview
        if [[ ${{ inputs.action }} == delete-deployment-preview ]]; then

          if [[ "${{ inputs.deployment-name }}" == false && ${{ inputs.deployment-id }} == false ]]; then
            echo ERROR: cannot delete a deployment preview without specifying a deployment name or id
            exit 1 # terminate and indicate error
          fi

          if [[ ${{ inputs.preview-name }} != false ]]; then
            BRANCH_DEPLOYMENT_NAME=${{ inputs.preview-name }}

          else 
            DEPLOYMENT_NAME="$(astro deployment inspect $DEPLOYMENT_ID --clean-output --key configuration.name)"
            BRANCH_DEPLOYMENT_NAME=${{ github.event.ref }}_$DEPLOYMENT_NAME
            BRANCH_DEPLOYMENT_NAME="${BRANCH_DEPLOYMENT_NAME// /_}"
          fi
          # delete branch deployment
          astro deployment delete -n $BRANCH_DEPLOYMENT_NAME -f

          # skip deploy
          echo "SKIP_DEPLOY=true" >> $GITHUB_OUTPUT

          # not image deploy only
          echo "IMAGE_DEPLOY_ONLY=false" >> $GITHUB_OUTPUT

          # set action
          ACTION=delete
        fi

        # # deploy to deployment preview if action is deploy-deployment-preview
        if [[ ${{ inputs.action }} == deploy-deployment-preview ]]; then

          if [[ "${{ inputs.deployment-name }}" == false && ${{ inputs.deployment-id }} == false ]]; then
            echo ERROR: cannot deploy to a deployment preview without specifying a deployment name or id
            exit 1 # terminate and indicate error
          fi

          if [[ ${{ inputs.preview-name }} != false ]]; then
            BRANCH_DEPLOYMENT_NAME=${{ inputs.preview-name }}
          else 
            DEPLOYMENT_NAME="$(astro deployment inspect $DEPLOYMENT_ID --clean-output --key configuration.name)"
            if [[ ${GITHUB_HEAD_REF##*/} != "" ]]; then
              BRANCH_DEPLOYMENT_NAME=${GITHUB_HEAD_REF##*/}_$DEPLOYMENT_NAME
            else
              # BRANCH_DEPLOYMENT_NAME=${{ github.event.ref }}_$DEPLOYMENT_NAME
              branch_ref="${{ github.ref }}"
              branch_name="${branch_ref##*/}"
              BRANCH_DEPLOYMENT_NAME=${branch_name}_$DEPLOYMENT_NAME
            fi
            BRANCH_DEPLOYMENT_NAME="${BRANCH_DEPLOYMENT_NAME// /_}"
          fi

          # Get Deployment ID
          echo "FINAL_DEPLOYMENT_ID=$(astro deployment inspect --clean-output -n $BRANCH_DEPLOYMENT_NAME --key metadata.deployment_id)" >> $GITHUB_OUTPUT

          # don't skip deploy
          echo "SKIP_DEPLOY=false" >> $GITHUB_OUTPUT
          
          # not image deploy only
          echo "IMAGE_DEPLOY_ONLY=false" >> $GITHUB_OUTPUT

          # set action
          ACTION=deploy-preview
        fi

        # if action is deploy set final Deployment id to Deployment id
        if [[ ${{ inputs.action }} == deploy ]]; then
          echo "FINAL_DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

          # don't skip deploy
          echo "SKIP_DEPLOY=false" >> $GITHUB_OUTPUT

          # not image deploy only
          echo "IMAGE_DEPLOY_ONLY=false" >> $GITHUB_OUTPUT

          # set action
          ACTION=deploy
        fi

        if [[ $ACTION == nothing ]]; then
          echo ERROR: you specified an improper action input. Action must be deploy, deploy-deployment-preview, create-deployment-preview, or delete-deployment-preview.
          exit 1 # terminate and indicate error
        fi
      shell: bash
      id: deployment-preview
    - name: Determine if DAG Deploy is enabled
      run: |
        if [[ ${{steps.deployment-preview.outputs.SKIP_DEPLOY}} == false && ${{steps.deployment-preview.outputs.IMAGE_DEPLOY_ONLY}} == false ]]; then
          echo "DAG_DEPLOY_ENABLED=$(astro deployment inspect ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}} --clean-output --key configuration.dag_deploy_enabled)" >> $GITHUB_OUTPUT
        else
          echo "DAG_DEPLOY_ENABLED=false" >> $GITHUB_OUTPUT
        fi
      shell: bash
      id: dag-deploy-enabled
    - name: Get Deployment Type
      run: |
        cd ${{ inputs.root-folder }}
        files=$(git diff --name-only HEAD^..HEAD)
        dags_only=1

        for file in $files; do
          if [[ $file != *"dags/"* ]]; then
            echo $file is not a DAG, triggering a full image build
            dags_only=0
            break
          fi
        done

        if [[ ${{steps.dag-deploy-enabled.outputs.DAG_DEPLOY_ENABLED}} == false ]]; then
          dags_only=0
        fi

        if [[ ${{steps.deployment-preview.outputs.SKIP_DEPLOY}} == true ]]; then
          # skip all deploy steps 
          dags_only=2
        fi

        echo "DAGS_ONLY=$dags_only" >> $GITHUB_OUTPUT
      shell: bash
      id: deployment-type
    # If only DAGs changed and dag deploys is enabled, do a DAG-only deploy
    - name: setup deploy options
      run: |
        options=""

        # add parse option
        if [[ ${{ inputs.parse }} == true ]]; then
          options="--parse"
        fi

        # add pytest option
        if [[ ${{ inputs.pytest }} == true ]]; then
          options="$options --pytest"

          if [[ -n "${{ inputs.pytest-file }}" ]]; then
            options="$options --test ${{ inputs.pytest-file }}"
          fi
        fi

        if [[ ${{ inputs.pytest }} == true ]]; then
          options="$options --pytest --test ${{ inputs.pytest-file }}"
        fi

        # add custom image option
        if [[ ${{ inputs.image-name }} != no-custom-image ]]; then
          options="$options --image-name ${{ inputs.image-name }}"
        fi

        # add force option
        if [[ ${{ inputs.force }} == true ]]; then
          options="$options --force"
        fi

        echo "OPTIONS=$options" >> $GITHUB_OUTPUT
      shell: bash
      id: deploy-options
    - name: DAG Deploy to Astro
      if: steps.deployment-type.outputs.DAGS_ONLY == 1
      run: |
        cd ${{ inputs.root-folder }}
        astro deploy ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}} --dags ${{steps.deploy-options.outputs.OPTIONS}}
      shell: bash
    # If any other files changed or dag deploys is disabled, deploy the entire Astro project
    - name: Image and DAG Deploy to Astro
      if: steps.deployment-type.outputs.DAGS_ONLY == 0
      run: |
        cd ${{ inputs.root-folder }}
        astro deploy ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}} ${{steps.deploy-options.outputs.OPTIONS}}
      shell: bash
    - name: Copy Airflow Connections, Variables, and Pools
      run: |
        if [[ ${{ inputs.action }} == create-deployment-preview ]]; then
          if [[ ${{ inputs.copy-connections }} == true ]]; then
            astro deployment connection copy --source-id ${{steps.deployment-preview.outputs.ORIGINAL_DEPLOYMENT_ID}}  --target-id ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}}
          fi
          if [[ ${{ inputs.copy-airflow-variables }} == true ]]; then
            astro deployment airflow-variable copy --source-id ${{steps.deployment-preview.outputs.ORIGINAL_DEPLOYMENT_ID}} --target-id ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}}
          fi
          if [[ ${{ inputs.copy-pools }} == true ]]; then
            astro deployment pool copy --source-id ${{steps.deployment-preview.outputs.ORIGINAL_DEPLOYMENT_ID}} --target-id ${{steps.deployment-preview.outputs.FINAL_DEPLOYMENT_ID}}
          fi
        fi
      shell: bash
